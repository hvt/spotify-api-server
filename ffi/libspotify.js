var FFI = require('ffi'),
    ArrayType = require('ref-array'),
    Struct = require('ref-struct'),
    ref = require('ref');
var voidPtr = ref.refType(ref.types.void);
var charPtr = ref.refType(ref.types.char);
exports.CONSTANTS = {
    sp_error: {
        '0': 'SP_ERROR_OK',
        '1': 'SP_ERROR_BAD_API_VERSION',
        '2': 'SP_ERROR_API_INITIALIZATION_FAILED',
        '3': 'SP_ERROR_TRACK_NOT_PLAYABLE',
        '5': 'SP_ERROR_BAD_APPLICATION_KEY',
        '6': 'SP_ERROR_BAD_USERNAME_OR_PASSWORD',
        '7': 'SP_ERROR_USER_BANNED',
        '8': 'SP_ERROR_UNABLE_TO_CONTACT_SERVER',
        '9': 'SP_ERROR_CLIENT_TOO_OLD',
        '10': 'SP_ERROR_OTHER_PERMANENT',
        '11': 'SP_ERROR_BAD_USER_AGENT',
        '12': 'SP_ERROR_MISSING_CALLBACK',
        '13': 'SP_ERROR_INVALID_INDATA',
        '14': 'SP_ERROR_INDEX_OUT_OF_RANGE',
        '15': 'SP_ERROR_USER_NEEDS_PREMIUM',
        '16': 'SP_ERROR_OTHER_TRANSIENT',
        '17': 'SP_ERROR_IS_LOADING',
        '18': 'SP_ERROR_NO_STREAM_AVAILABLE',
        '19': 'SP_ERROR_PERMISSION_DENIED',
        '20': 'SP_ERROR_INBOX_IS_FULL',
        '21': 'SP_ERROR_NO_CACHE',
        '22': 'SP_ERROR_NO_SUCH_USER',
        '23': 'SP_ERROR_NO_CREDENTIALS',
        '24': 'SP_ERROR_NETWORK_DISABLED',
        '25': 'SP_ERROR_INVALID_DEVICE_ID',
        '26': 'SP_ERROR_CANT_OPEN_TRACE_FILE',
        '27': 'SP_ERROR_APPLICATION_BANNED',
        '31': 'SP_ERROR_OFFLINE_TOO_MANY_TRACKS',
        '32': 'SP_ERROR_OFFLINE_DISK_CACHE',
        '33': 'SP_ERROR_OFFLINE_EXPIRED',
        '34': 'SP_ERROR_OFFLINE_NOT_ALLOWED',
        '35': 'SP_ERROR_OFFLINE_LICENSE_LOST',
        '36': 'SP_ERROR_OFFLINE_LICENSE_ERROR',
        '39': 'SP_ERROR_LASTFM_AUTH_ERROR',
        '40': 'SP_ERROR_INVALID_ARGUMENT',
        '41': 'SP_ERROR_SYSTEM_FAILURE',
        SP_ERROR_OK: 0,
        SP_ERROR_BAD_API_VERSION: 1,
        SP_ERROR_API_INITIALIZATION_FAILED: 2,
        SP_ERROR_TRACK_NOT_PLAYABLE: 3,
        SP_ERROR_BAD_APPLICATION_KEY: 5,
        SP_ERROR_BAD_USERNAME_OR_PASSWORD: 6,
        SP_ERROR_USER_BANNED: 7,
        SP_ERROR_UNABLE_TO_CONTACT_SERVER: 8,
        SP_ERROR_CLIENT_TOO_OLD: 9,
        SP_ERROR_OTHER_PERMANENT: 10,
        SP_ERROR_BAD_USER_AGENT: 11,
        SP_ERROR_MISSING_CALLBACK: 12,
        SP_ERROR_INVALID_INDATA: 13,
        SP_ERROR_INDEX_OUT_OF_RANGE: 14,
        SP_ERROR_USER_NEEDS_PREMIUM: 15,
        SP_ERROR_OTHER_TRANSIENT: 16,
        SP_ERROR_IS_LOADING: 17,
        SP_ERROR_NO_STREAM_AVAILABLE: 18,
        SP_ERROR_PERMISSION_DENIED: 19,
        SP_ERROR_INBOX_IS_FULL: 20,
        SP_ERROR_NO_CACHE: 21,
        SP_ERROR_NO_SUCH_USER: 22,
        SP_ERROR_NO_CREDENTIALS: 23,
        SP_ERROR_NETWORK_DISABLED: 24,
        SP_ERROR_INVALID_DEVICE_ID: 25,
        SP_ERROR_CANT_OPEN_TRACE_FILE: 26,
        SP_ERROR_APPLICATION_BANNED: 27,
        SP_ERROR_OFFLINE_TOO_MANY_TRACKS: 31,
        SP_ERROR_OFFLINE_DISK_CACHE: 32,
        SP_ERROR_OFFLINE_EXPIRED: 33,
        SP_ERROR_OFFLINE_NOT_ALLOWED: 34,
        SP_ERROR_OFFLINE_LICENSE_LOST: 35,
        SP_ERROR_OFFLINE_LICENSE_ERROR: 36,
        SP_ERROR_LASTFM_AUTH_ERROR: 39,
        SP_ERROR_INVALID_ARGUMENT: 40,
        SP_ERROR_SYSTEM_FAILURE: 41
    },
    sp_connectionstate: {
        '0': 'SP_CONNECTION_STATE_LOGGED_OUT',
        '1': 'SP_CONNECTION_STATE_LOGGED_IN',
        '2': 'SP_CONNECTION_STATE_DISCONNECTED',
        '3': 'SP_CONNECTION_STATE_UNDEFINED',
        '4': 'SP_CONNECTION_STATE_OFFLINE',
        SP_CONNECTION_STATE_LOGGED_OUT: 0,
        SP_CONNECTION_STATE_LOGGED_IN: 1,
        SP_CONNECTION_STATE_DISCONNECTED: 2,
        SP_CONNECTION_STATE_UNDEFINED: 3,
        SP_CONNECTION_STATE_OFFLINE: 4
    },
    sp_bitrate: {
        '0': 'SP_BITRATE_160k',
        '1': 'SP_BITRATE_320k',
        '2': 'SP_BITRATE_96k',
        SP_BITRATE_160k: 0,
        SP_BITRATE_320k: 1,
        SP_BITRATE_96k: 2
    },
    sp_social_provider: {
        '0': 'SP_SOCIAL_PROVIDER_SPOTIFY',
        '1': 'SP_SOCIAL_PROVIDER_FACEBOOK',
        '2': 'SP_SOCIAL_PROVIDER_LASTFM',
        SP_SOCIAL_PROVIDER_SPOTIFY: 0,
        SP_SOCIAL_PROVIDER_FACEBOOK: 1,
        SP_SOCIAL_PROVIDER_LASTFM: 2
    },
    sp_scrobbling_state: {
        '0': 'SP_SCROBBLING_STATE_USE_GLOBAL_SETTING',
        '1': 'SP_SCROBBLING_STATE_LOCAL_ENABLED',
        '2': 'SP_SCROBBLING_STATE_LOCAL_DISABLED',
        '3': 'SP_SCROBBLING_STATE_GLOBAL_ENABLED',
        '4': 'SP_SCROBBLING_STATE_GLOBAL_DISABLED',
        SP_SCROBBLING_STATE_USE_GLOBAL_SETTING: 0,
        SP_SCROBBLING_STATE_LOCAL_ENABLED: 1,
        SP_SCROBBLING_STATE_LOCAL_DISABLED: 2,
        SP_SCROBBLING_STATE_GLOBAL_ENABLED: 3,
        SP_SCROBBLING_STATE_GLOBAL_DISABLED: 4
    },
    sp_connection_type: {
        '0': 'SP_CONNECTION_TYPE_UNKNOWN',
        '1': 'SP_CONNECTION_TYPE_NONE',
        '2': 'SP_CONNECTION_TYPE_MOBILE',
        '3': 'SP_CONNECTION_TYPE_MOBILE_ROAMING',
        '4': 'SP_CONNECTION_TYPE_WIFI',
        '5': 'SP_CONNECTION_TYPE_WIRED',
        SP_CONNECTION_TYPE_UNKNOWN: 0,
        SP_CONNECTION_TYPE_NONE: 1,
        SP_CONNECTION_TYPE_MOBILE: 2,
        SP_CONNECTION_TYPE_MOBILE_ROAMING: 3,
        SP_CONNECTION_TYPE_WIFI: 4,
        SP_CONNECTION_TYPE_WIRED: 5
    },
    sp_connection_rules: {
        '1': 'SP_CONNECTION_RULE_NETWORK',
        '2': 'SP_CONNECTION_RULE_NETWORK_IF_ROAMING',
        '4': 'SP_CONNECTION_RULE_ALLOW_SYNC_OVER_MOBILE',
        '8': 'SP_CONNECTION_RULE_ALLOW_SYNC_OVER_WIFI',
        SP_CONNECTION_RULE_NETWORK: 1,
        SP_CONNECTION_RULE_NETWORK_IF_ROAMING: 2,
        SP_CONNECTION_RULE_ALLOW_SYNC_OVER_MOBILE: 4,
        SP_CONNECTION_RULE_ALLOW_SYNC_OVER_WIFI: 8
    },
    sp_image_size: {
        '0': 'SP_IMAGE_SIZE_NORMAL',
        '1': 'SP_IMAGE_SIZE_SMALL',
        '2': 'SP_IMAGE_SIZE_LARGE',
        SP_IMAGE_SIZE_NORMAL: 0,
        SP_IMAGE_SIZE_SMALL: 1,
        SP_IMAGE_SIZE_LARGE: 2
    },
    '': {
        '0': 'SP_TOPLIST_REGION_EVERYWHERE',
        '1': 'SP_TOPLIST_REGION_USER',
        '2': 'SP_TOPLIST_TYPE_TRACKS',
        '3': 'SP_ALBUMTYPE_UNKNOWN',
        '4': 'SP_LINKTYPE_SEARCH',
        '5': 'SP_LINKTYPE_PLAYLIST',
        '6': 'SP_LINKTYPE_PROFILE',
        '7': 'SP_LINKTYPE_STARRED',
        '8': 'SP_LINKTYPE_LOCALTRACK',
        '9': 'SP_LINKTYPE_IMAGE',
        SP_LINKTYPE_INVALID: 0,
        SP_LINKTYPE_TRACK: 1,
        SP_LINKTYPE_ALBUM: 2,
        SP_LINKTYPE_ARTIST: 3,
        SP_LINKTYPE_SEARCH: 4,
        SP_LINKTYPE_PLAYLIST: 5,
        SP_LINKTYPE_PROFILE: 6,
        SP_LINKTYPE_STARRED: 7,
        SP_LINKTYPE_LOCALTRACK: 8,
        SP_LINKTYPE_IMAGE: 9,
        SP_ALBUMTYPE_ALBUM: 0,
        SP_ALBUMTYPE_SINGLE: 1,
        SP_ALBUMTYPE_COMPILATION: 2,
        SP_ALBUMTYPE_UNKNOWN: 3,
        SP_IMAGE_FORMAT_UNKNOWN: -1,
        '-1': 'SP_IMAGE_FORMAT_UNKNOWN',
        SP_IMAGE_FORMAT_JPEG: 0,
        SP_TOPLIST_TYPE_ARTISTS: 0,
        SP_TOPLIST_TYPE_ALBUMS: 1,
        SP_TOPLIST_TYPE_TRACKS: 2,
        SP_TOPLIST_REGION_EVERYWHERE: 0,
        SP_TOPLIST_REGION_USER: 1
    },
    sp_track_offline_status: {
        '0': 'SP_TRACK_OFFLINE_NO',
        '1': 'SP_TRACK_OFFLINE_WAITING',
        '2': 'SP_TRACK_OFFLINE_DOWNLOADING',
        '3': 'SP_TRACK_OFFLINE_DONE',
        '4': 'SP_TRACK_OFFLINE_ERROR',
        '5': 'SP_TRACK_OFFLINE_DONE_EXPIRED',
        '6': 'SP_TRACK_OFFLINE_LIMIT_EXCEEDED',
        '7': 'SP_TRACK_OFFLINE_DONE_RESYNC',
        SP_TRACK_OFFLINE_NO: 0,
        SP_TRACK_OFFLINE_WAITING: 1,
        SP_TRACK_OFFLINE_DOWNLOADING: 2,
        SP_TRACK_OFFLINE_DONE: 3,
        SP_TRACK_OFFLINE_ERROR: 4,
        SP_TRACK_OFFLINE_DONE_EXPIRED: 5,
        SP_TRACK_OFFLINE_LIMIT_EXCEEDED: 6,
        SP_TRACK_OFFLINE_DONE_RESYNC: 7
    },
    sp_availability: {
        '0': 'SP_TRACK_AVAILABILITY_UNAVAILABLE',
        '1': 'SP_TRACK_AVAILABILITY_AVAILABLE',
        '2': 'SP_TRACK_AVAILABILITY_NOT_STREAMABLE',
        '3': 'SP_TRACK_AVAILABILITY_BANNED_BY_ARTIST',
        SP_TRACK_AVAILABILITY_UNAVAILABLE: 0,
        SP_TRACK_AVAILABILITY_AVAILABLE: 1,
        SP_TRACK_AVAILABILITY_NOT_STREAMABLE: 2,
        SP_TRACK_AVAILABILITY_BANNED_BY_ARTIST: 3
    },
    sp_artistbrowse_type: {
        '0': 'SP_ARTISTBROWSE_FULL',
        '1': 'SP_ARTISTBROWSE_NO_TRACKS',
        '2': 'SP_ARTISTBROWSE_NO_ALBUMS',
        SP_ARTISTBROWSE_FULL: 0,
        SP_ARTISTBROWSE_NO_TRACKS: 1,
        SP_ARTISTBROWSE_NO_ALBUMS: 2
    },
    sp_search_type: {
        '0': 'SP_SEARCH_STANDARD',
        '1': 'SP_SEARCH_SUGGEST',
        SP_SEARCH_STANDARD: 0,
        SP_SEARCH_SUGGEST: 1
    },
    sp_playlist_offline_status: {
        '0': 'SP_PLAYLIST_OFFLINE_STATUS_NO',
        '1': 'SP_PLAYLIST_OFFLINE_STATUS_YES',
        '2': 'SP_PLAYLIST_OFFLINE_STATUS_DOWNLOADING',
        '3': 'SP_PLAYLIST_OFFLINE_STATUS_WAITING',
        SP_PLAYLIST_OFFLINE_STATUS_NO: 0,
        SP_PLAYLIST_OFFLINE_STATUS_YES: 1,
        SP_PLAYLIST_OFFLINE_STATUS_DOWNLOADING: 2,
        SP_PLAYLIST_OFFLINE_STATUS_WAITING: 3
    },
    sp_playlist_type: {
        '0': 'SP_PLAYLIST_TYPE_PLAYLIST',
        '1': 'SP_PLAYLIST_TYPE_START_FOLDER',
        '2': 'SP_PLAYLIST_TYPE_END_FOLDER',
        '3': 'SP_PLAYLIST_TYPE_PLACEHOLDER',
        SP_PLAYLIST_TYPE_PLAYLIST: 0,
        SP_PLAYLIST_TYPE_START_FOLDER: 1,
        SP_PLAYLIST_TYPE_END_FOLDER: 2,
        SP_PLAYLIST_TYPE_PLACEHOLDER: 3
    }
};
var sp_session_callbacks = exports.sp_session_callbacks = Struct({
    logged_in: voidPtr,
    logged_out: voidPtr,
    metadata_updated: voidPtr,
    connection_error: voidPtr,
    message_to_user: voidPtr,
    notify_main_thread: voidPtr,
    music_delivery: voidPtr,
    play_token_lost: voidPtr,
    log_message: voidPtr,
    end_of_track: voidPtr,
    streaming_error: voidPtr,
    userinfo_updated: voidPtr,
    start_playback: voidPtr,
    stop_playback: voidPtr,
    get_audio_buffer_stats: voidPtr,
    offline_status_updated: voidPtr,
    offline_error: voidPtr,
    credentials_blob_updated: voidPtr,
    connectionstate_updated: voidPtr,
    scrobble_error: voidPtr,
    private_session_mode_changed: voidPtr,
});
var sp_session_callbacksPtr = exports.sp_session_callbacksPtr = ref.refType(sp_session_callbacks);
var sp_session_config = exports.sp_session_config = Struct({
    api_version: ref.types.int32,
    cache_location: ref.types.CString,
    settings_location: ref.types.CString,
    application_key: voidPtr,
    application_key_size: ref.types.uint64,
    user_agent: ref.types.CString,
    callbacks: sp_session_callbacksPtr,
    userdata: voidPtr,
    compress_playlists: ref.types.uchar,
    dont_save_metadata_for_playlists: ref.types.uchar,
    initially_unload_playlists: ref.types.uchar,
    device_id: ref.types.CString,
    proxy: ref.types.CString,
    proxy_username: ref.types.CString,
    proxy_password: ref.types.CString,
    tracefile: ref.types.CString,
});
var sp_session_configPtr = exports.sp_session_configPtr = ref.refType(sp_session_config);
var sp_session = exports.sp_session = voidPtr;
var sp_sessionPtr = exports.sp_sessionPtr = ref.refType(sp_session);
var sp_user = exports.sp_user = voidPtr;
var sp_userPtr = exports.sp_userPtr = ref.refType(sp_user);
var sp_track = exports.sp_track = voidPtr;
var sp_trackPtr = exports.sp_trackPtr = ref.refType(sp_track);
var TracksArray = ArrayType(sp_trackPtr);
var sp_playlistcontainer = exports.sp_playlistcontainer = voidPtr;
var sp_playlistcontainerPtr = exports.sp_playlistcontainerPtr = ref.refType(sp_playlistcontainer);
var sp_playlist = exports.sp_playlist = voidPtr;
var sp_playlistPtr = exports.sp_playlistPtr = ref.refType(sp_playlist);
var sp_scrobbling_state = exports.sp_scrobbling_state = Struct({
    sp_scrobbling_state: ref.types.uint32,
});
var sp_scrobbling_statePtr = exports.sp_scrobbling_statePtr = ref.refType(sp_scrobbling_state);
var bool = exports.bool = voidPtr;
var boolPtr = exports.boolPtr = ref.refType(bool);
var sp_offline_sync_status = exports.sp_offline_sync_status = Struct({
    queued_tracks: ref.types.int32,
    queued_bytes: ref.types.uint64,
    done_tracks: ref.types.int32,
    done_bytes: ref.types.uint64,
    copied_tracks: ref.types.int32,
    copied_bytes: ref.types.uint64,
    willnotcopy_tracks: ref.types.int32,
    error_tracks: ref.types.int32,
    syncing: ref.types.uchar,
});
var sp_offline_sync_statusPtr = exports.sp_offline_sync_statusPtr = ref.refType(sp_offline_sync_status);
var sp_link = exports.sp_link = voidPtr;
var sp_linkPtr = exports.sp_linkPtr = ref.refType(sp_link);
var sp_album = exports.sp_album = voidPtr;
var sp_albumPtr = exports.sp_albumPtr = ref.refType(sp_album);
var sp_artist = exports.sp_artist = voidPtr;
var sp_artistPtr = exports.sp_artistPtr = ref.refType(sp_artist);
var sp_artistbrowse = exports.sp_artistbrowse = voidPtr;
var sp_artistbrowsePtr = exports.sp_artistbrowsePtr = ref.refType(sp_artistbrowse);
var sp_search = exports.sp_search = voidPtr;
var sp_searchPtr = exports.sp_searchPtr = ref.refType(sp_search);
var sp_image = exports.sp_image = voidPtr;
var sp_imagePtr = exports.sp_imagePtr = ref.refType(sp_image);
var byte = exports.byte = voidPtr;
var bytePtr = exports.bytePtr = ref.refType(byte);
var sp_albumbrowse = exports.sp_albumbrowse = voidPtr;
var sp_albumbrowsePtr = exports.sp_albumbrowsePtr = ref.refType(sp_albumbrowse);
var albumbrowse_complete_cb = exports.albumbrowse_complete_cb = Struct({
    result: sp_albumbrowsePtr,
    userdata: voidPtr,
});
var albumbrowse_complete_cbPtr = exports.albumbrowse_complete_cbPtr = ref.refType(albumbrowse_complete_cb);
var artistbrowse_complete_cb = exports.artistbrowse_complete_cb = Struct({
    result: sp_artistbrowsePtr,
    userdata: voidPtr,
});
var artistbrowse_complete_cbPtr = exports.artistbrowse_complete_cbPtr = ref.refType(artistbrowse_complete_cb);
var image_loaded_cb = exports.image_loaded_cb = Struct({
    image: sp_imagePtr,
    userdata: voidPtr,
});
var image_loaded_cbPtr = exports.image_loaded_cbPtr = ref.refType(image_loaded_cb);
var size_t = exports.size_t = voidPtr;
var size_tPtr = exports.size_tPtr = ref.refType(size_t);
var search_complete_cb = exports.search_complete_cb = Struct({
    result: sp_searchPtr,
    userdata: voidPtr,
});
var search_complete_cbPtr = exports.search_complete_cbPtr = ref.refType(search_complete_cb);
var sp_playlist_callbacks = exports.sp_playlist_callbacks = Struct({
    tracks_added: voidPtr,
    tracks_removed: voidPtr,
    tracks_moved: voidPtr,
    playlist_renamed: voidPtr,
    playlist_state_changed: voidPtr,
    playlist_update_in_progress: voidPtr,
    playlist_metadata_updated: voidPtr,
    track_created_changed: voidPtr,
    track_seen_changed: voidPtr,
    description_changed: voidPtr,
    image_changed: voidPtr,
    track_message_changed: voidPtr,
    subscribers_changed: voidPtr,
});
var sp_playlist_callbacksPtr = exports.sp_playlist_callbacksPtr = ref.refType(sp_playlist_callbacks);
var sp_subscribers = exports.sp_subscribers = Struct({
    count: ref.types.uint32,
    subscribers: ArrayType(ref.types.CString, 1),
});
var sp_subscribersPtr = exports.sp_subscribersPtr = ref.refType(sp_subscribers);
var sp_playlistcontainer_callbacks = exports.sp_playlistcontainer_callbacks = Struct({
    playlist_added: voidPtr,
    playlist_removed: voidPtr,
    playlist_moved: voidPtr,
    container_loaded: voidPtr,
});
var sp_playlistcontainer_callbacksPtr = exports.sp_playlistcontainer_callbacksPtr = ref.refType(sp_playlistcontainer_callbacks);
var sp_toplistbrowse = exports.sp_toplistbrowse = voidPtr;
var sp_toplistbrowsePtr = exports.sp_toplistbrowsePtr = ref.refType(sp_toplistbrowse);
var toplistbrowse_complete_cb = exports.toplistbrowse_complete_cb = Struct({
    result: sp_toplistbrowsePtr,
    userdata: voidPtr,
});
var toplistbrowse_complete_cbPtr = exports.toplistbrowse_complete_cbPtr = ref.refType(toplistbrowse_complete_cb);
var sp_inbox = exports.sp_inbox = voidPtr;
var sp_inboxPtr = exports.sp_inboxPtr = ref.refType(sp_inbox);
var inboxpost_complete_cb = exports.inboxpost_complete_cb = Struct({
    result: sp_inboxPtr,
    userdata: voidPtr,
});
var inboxpost_complete_cbPtr = exports.inboxpost_complete_cbPtr = ref.refType(inboxpost_complete_cb);
exports.libspotify = new FFI.Library('libspotify', {
    sp_error_message: [ref.types.CString, [ref.types.uint32]],
    sp_session_create: [ref.types.uint32, [sp_session_configPtr, voidPtr]],
    sp_session_release: [ref.types.uint32, [sp_session]],
    sp_session_login: [ref.types.uint32, [sp_sessionPtr, ref.types.CString, ref.types.CString, ref.types.uchar, ref.types.CString]],
    sp_session_relogin: [ref.types.uint32, [sp_sessionPtr]],
    sp_session_remembered_user: [ref.types.int32, [sp_sessionPtr, ref.types.CString, ref.types.uint64]],
    sp_session_user_name: [ref.types.CString, [sp_sessionPtr]],
    sp_session_forget_me: [ref.types.uint32, [sp_sessionPtr]],
    sp_session_user: [sp_user, [sp_sessionPtr]],
    sp_session_logout: [ref.types.uint32, [sp_sessionPtr]],
    sp_session_flush_caches: [ref.types.uint32, [sp_sessionPtr]],
    sp_session_connectionstate: [ref.types.uint32, [sp_sessionPtr]],
    sp_session_userdata: [voidPtr, [sp_sessionPtr]],
    sp_session_set_cache_size: [ref.types.uint32, [sp_sessionPtr, ref.types.uint64]],
    sp_session_process_events: [ref.types.uint32, [sp_sessionPtr, voidPtr]],
    sp_session_player_load: [ref.types.uint32, [sp_sessionPtr, sp_track]],
    sp_session_player_seek: [ref.types.uint32, [sp_sessionPtr, ref.types.int32]],
    sp_session_player_play: [ref.types.uint32, [sp_sessionPtr, ref.types.uchar]],
    sp_session_player_unload: [ref.types.uint32, [sp_sessionPtr]],
    sp_session_player_prefetch: [ref.types.uint32, [sp_sessionPtr, sp_trackPtr]],
    sp_session_playlistcontainer: [sp_playlistcontainer, [sp_sessionPtr]],
    sp_session_inbox_create: [sp_playlist, [sp_sessionPtr]],
    sp_session_starred_create: [sp_playlistPtr, [sp_sessionPtr]],
    sp_session_starred_for_user_create: [sp_playlistPtr, [sp_sessionPtr, ref.types.CString]],
    sp_session_publishedcontainer_for_user_create: [sp_playlistcontainerPtr, [sp_sessionPtr, ref.types.CString]],
    sp_session_preferred_bitrate: [ref.types.uint32, [sp_sessionPtr, ref.types.uint32]],
    sp_session_preferred_offline_bitrate: [ref.types.uint32, [sp_sessionPtr, ref.types.uint32, ref.types.uchar]],
    sp_session_get_volume_normalization: [ref.types.uchar, [sp_sessionPtr]],
    sp_session_set_volume_normalization: [ref.types.uint32, [sp_sessionPtr, ref.types.uchar]],
    sp_session_set_private_session: [ref.types.uint32, [sp_sessionPtr, ref.types.uchar]],
    sp_session_is_private_session: [ref.types.uchar, [sp_sessionPtr]],
    sp_session_set_scrobbling: [ref.types.uint32, [sp_sessionPtr, ref.types.uint32, ref.types.uint32]],
    sp_session_is_scrobbling: [ref.types.uint32, [sp_sessionPtr, ref.types.uint32, sp_scrobbling_statePtr]],
    sp_session_is_scrobbling_possible: [ref.types.uint32, [sp_sessionPtr, ref.types.uint32, bool]],
    sp_session_set_social_credentials: [ref.types.uint32, [sp_sessionPtr, ref.types.uint32, ref.types.CString, ref.types.CString]],
    sp_session_set_connection_type: [ref.types.uint32, [sp_sessionPtr, ref.types.uint32]],
    sp_session_set_connection_rules: [ref.types.uint32, [sp_sessionPtr, ref.types.uint32]],
    sp_offline_tracks_to_sync: [ref.types.int32, [sp_sessionPtr]],
    sp_offline_num_playlists: [ref.types.int32, [sp_sessionPtr]],
    sp_offline_sync_get_status: [ref.types.uchar, [sp_sessionPtr, sp_offline_sync_statusPtr]],
    sp_offline_time_left: [ref.types.int32, [sp_sessionPtr]],
    sp_session_user_country: [ref.types.int32, [sp_sessionPtr]],
    sp_link_create_from_string: [sp_linkPtr, [ref.types.CString]],
    sp_link_create_from_track: [sp_linkPtr, [sp_trackPtr, ref.types.int32]],
    sp_link_create_from_album: [sp_linkPtr, [sp_album]],
    sp_link_create_from_album_cover: [sp_linkPtr, [sp_albumPtr, ref.types.uint32]],
    sp_link_create_from_artist: [sp_linkPtr, [sp_artist]],
    sp_link_create_from_artist_portrait: [sp_linkPtr, [sp_artistPtr, ref.types.uint32]],
    sp_link_create_from_artistbrowse_portrait: [sp_linkPtr, [sp_artistbrowse, ref.types.int32]],
    sp_link_create_from_search: [sp_linkPtr, [sp_search]],
    sp_link_create_from_playlist: [sp_linkPtr, [sp_playlistPtr]],
    sp_link_create_from_user: [sp_linkPtr, [sp_userPtr]],
    sp_link_create_from_image: [sp_linkPtr, [sp_image]],
    sp_link_as_string: [ref.types.int32, [sp_linkPtr, charPtr, ref.types.int32]],
    sp_link_type: [ref.types.uint32, [sp_linkPtr]],
    sp_link_as_track: [sp_trackPtr, [sp_linkPtr]],
    sp_link_as_track_and_offset: [sp_trackPtr, [sp_linkPtr, voidPtr]],
    sp_link_as_album: [sp_albumPtr, [sp_linkPtr]],
    sp_link_as_artist: [sp_artistPtr, [sp_linkPtr]],
    sp_link_as_user: [sp_userPtr, [sp_linkPtr]],
    sp_link_add_ref: [ref.types.uint32, [sp_linkPtr]],
    sp_link_release: [ref.types.uint32, [sp_linkPtr]],
    sp_track_is_loaded: [ref.types.uchar, [sp_trackPtr]],
    sp_track_error: [ref.types.uint32, [sp_trackPtr]],
    sp_track_offline_get_status: [ref.types.uint32, [sp_trackPtr]],
    sp_track_get_availability: [ref.types.uint32, [sp_sessionPtr, sp_trackPtr]],
    sp_track_is_local: [ref.types.uchar, [sp_sessionPtr, sp_trackPtr]],
    sp_track_is_autolinked: [ref.types.uchar, [sp_sessionPtr, sp_trackPtr]],
    sp_track_get_playable: [sp_trackPtr, [sp_sessionPtr, sp_trackPtr]],
    sp_track_is_placeholder: [ref.types.uchar, [sp_trackPtr]],
    sp_track_is_starred: [ref.types.uchar, [sp_sessionPtr, sp_trackPtr]],
    sp_track_set_starred: [ref.types.uint32, [sp_sessionPtr, voidPtr, ref.types.int32, ref.types.uchar]],
    sp_track_num_artists: [ref.types.int32, [sp_trackPtr]],
    sp_track_artist: [sp_artistPtr, [sp_trackPtr, ref.types.int32]],
    sp_track_album: [sp_albumPtr, [sp_trackPtr]],
    sp_track_name: [ref.types.CString, [sp_trackPtr]],
    sp_track_duration: [ref.types.int32, [sp_trackPtr]],
    sp_track_popularity: [ref.types.int32, [sp_trackPtr]],
    sp_track_disc: [ref.types.int32, [sp_trackPtr]],
    sp_track_index: [ref.types.int32, [sp_trackPtr]],
    sp_localtrack_create: [sp_trackPtr, [ref.types.CString, ref.types.CString, ref.types.CString, ref.types.int32]],
    sp_track_add_ref: [ref.types.uint32, [sp_trackPtr]],
    sp_track_release: [ref.types.uint32, [sp_trackPtr]],
    sp_album_is_loaded: [ref.types.uchar, [sp_albumPtr]],
    sp_album_is_available: [ref.types.uchar, [sp_albumPtr]],
    sp_album_artist: [sp_artistPtr, [sp_albumPtr]],
    sp_album_cover: [byte, [sp_albumPtr, ref.types.uint32]],
    sp_album_name: [ref.types.CString, [sp_albumPtr]],
    sp_album_year: [ref.types.int32, [sp_albumPtr]],
    sp_album_type: [ref.types.uint32, [sp_albumPtr]],
    sp_album_add_ref: [ref.types.uint32, [sp_albumPtr]],
    sp_album_release: [ref.types.uint32, [sp_albumPtr]],
    sp_artist_name: [ref.types.CString, [sp_artistPtr]],
    sp_artist_is_loaded: [ref.types.uchar, [sp_artistPtr]],
    sp_artist_portrait: [bytePtr, [sp_artistPtr, ref.types.uint32]],
    sp_artist_add_ref: [ref.types.uint32, [sp_artistPtr]],
    sp_artist_release: [ref.types.uint32, [sp_artistPtr]],
    sp_albumbrowse_create: [sp_albumbrowse, [sp_sessionPtr, sp_albumPtr, albumbrowse_complete_cbPtr, voidPtr]],
    sp_albumbrowse_is_loaded: [ref.types.uchar, [sp_albumbrowsePtr]],
    sp_albumbrowse_error: [ref.types.uint32, [sp_albumbrowsePtr]],
    sp_albumbrowse_album: [sp_albumPtr, [sp_albumbrowsePtr]],
    sp_albumbrowse_artist: [sp_artistPtr, [sp_albumbrowsePtr]],
    sp_albumbrowse_num_copyrights: [ref.types.int32, [sp_albumbrowsePtr]],
    sp_albumbrowse_copyright: [ref.types.CString, [sp_albumbrowsePtr, ref.types.int32]],
    sp_albumbrowse_num_tracks: [ref.types.int32, [sp_albumbrowsePtr]],
    sp_albumbrowse_track: [sp_trackPtr, [sp_albumbrowsePtr, ref.types.int32]],
    sp_albumbrowse_review: [ref.types.CString, [sp_albumbrowsePtr]],
    sp_albumbrowse_backend_request_duration: [ref.types.int32, [sp_albumbrowsePtr]],
    sp_albumbrowse_add_ref: [ref.types.uint32, [sp_albumbrowsePtr]],
    sp_albumbrowse_release: [ref.types.uint32, [sp_albumbrowsePtr]],
    sp_artistbrowse_create: [sp_artistbrowsePtr, [sp_sessionPtr, sp_artistPtr, ref.types.uint32, artistbrowse_complete_cbPtr, voidPtr]],
    sp_artistbrowse_is_loaded: [ref.types.uchar, [sp_artistbrowsePtr]],
    sp_artistbrowse_error: [ref.types.uint32, [sp_artistbrowsePtr]],
    sp_artistbrowse_artist: [sp_artistPtr, [sp_artistbrowsePtr]],
    sp_artistbrowse_num_portraits: [ref.types.int32, [sp_artistbrowsePtr]],
    sp_artistbrowse_portrait: [bytePtr, [sp_artistbrowsePtr, ref.types.int32]],
    sp_artistbrowse_num_tracks: [ref.types.int32, [sp_artistbrowsePtr]],
    sp_artistbrowse_track: [sp_trackPtr, [sp_artistbrowsePtr, ref.types.int32]],
    sp_artistbrowse_num_tophit_tracks: [ref.types.int32, [sp_artistbrowsePtr]],
    sp_artistbrowse_tophit_track: [sp_trackPtr, [sp_artistbrowsePtr, ref.types.int32]],
    sp_artistbrowse_num_albums: [ref.types.int32, [sp_artistbrowsePtr]],
    sp_artistbrowse_album: [sp_albumPtr, [sp_artistbrowsePtr, ref.types.int32]],
    sp_artistbrowse_num_similar_artists: [ref.types.int32, [sp_artistbrowsePtr]],
    sp_artistbrowse_similar_artist: [sp_artistPtr, [sp_artistbrowsePtr, ref.types.int32]],
    sp_artistbrowse_biography: [ref.types.CString, [sp_artistbrowsePtr]],
    sp_artistbrowse_backend_request_duration: [ref.types.int32, [sp_artistbrowsePtr]],
    sp_artistbrowse_add_ref: [ref.types.uint32, [sp_artistbrowsePtr]],
    sp_artistbrowse_release: [ref.types.uint32, [sp_artistbrowsePtr]],
    sp_image_create: [sp_imagePtr, [sp_sessionPtr, bytePtr]],
    sp_image_create_from_link: [sp_imagePtr, [sp_sessionPtr, sp_linkPtr]],
    sp_image_add_load_callback: [ref.types.uint32, [sp_imagePtr, image_loaded_cbPtr, voidPtr]],
    sp_image_remove_load_callback: [ref.types.uint32, [sp_imagePtr, image_loaded_cbPtr, voidPtr]],
    sp_image_is_loaded: [ref.types.uchar, [sp_imagePtr]],
    sp_image_error: [ref.types.uint32, [sp_imagePtr]],
    sp_image_format: [ref.types.int32, [sp_imagePtr]],
    sp_image_data: [voidPtr, [sp_imagePtr, size_t]],
    sp_image_image_id: [bytePtr, [sp_imagePtr]],
    sp_image_add_ref: [ref.types.uint32, [sp_imagePtr]],
    sp_image_release: [ref.types.uint32, [sp_imagePtr]],
    sp_search_create: [sp_searchPtr, [sp_sessionPtr, ref.types.CString, ref.types.int32, ref.types.int32, ref.types.int32, ref.types.int32, ref.types.int32, ref.types.int32, ref.types.int32, ref.types.int32, ref.types.uint32, search_complete_cbPtr, voidPtr]],
    sp_search_is_loaded: [ref.types.uchar, [sp_searchPtr]],
    sp_search_error: [ref.types.uint32, [sp_searchPtr]],
    sp_search_num_tracks: [ref.types.int32, [sp_searchPtr]],
    sp_search_track: [sp_trackPtr, [sp_searchPtr, ref.types.int32]],
    sp_search_num_albums: [ref.types.int32, [sp_searchPtr]],
    sp_search_album: [sp_albumPtr, [sp_searchPtr, ref.types.int32]],
    sp_search_num_playlists: [ref.types.int32, [sp_searchPtr]],
    sp_search_playlist: [sp_playlistPtr, [sp_searchPtr, ref.types.int32]],
    sp_search_playlist_name: [ref.types.CString, [sp_searchPtr, ref.types.int32]],
    sp_search_playlist_uri: [ref.types.CString, [sp_searchPtr, ref.types.int32]],
    sp_search_playlist_image_uri: [ref.types.CString, [sp_searchPtr, ref.types.int32]],
    sp_search_num_artists: [ref.types.int32, [sp_searchPtr]],
    sp_search_artist: [sp_artistPtr, [sp_searchPtr, ref.types.int32]],
    sp_search_query: [ref.types.CString, [sp_searchPtr]],
    sp_search_did_you_mean: [ref.types.CString, [sp_searchPtr]],
    sp_search_total_tracks: [ref.types.int32, [sp_searchPtr]],
    sp_search_total_albums: [ref.types.int32, [sp_searchPtr]],
    sp_search_total_artists: [ref.types.int32, [sp_searchPtr]],
    sp_search_total_playlists: [ref.types.int32, [sp_searchPtr]],
    sp_search_add_ref: [ref.types.uint32, [sp_searchPtr]],
    sp_search_release: [ref.types.uint32, [sp_searchPtr]],
    sp_playlist_is_loaded: [ref.types.uchar, [sp_playlistPtr]],
    sp_playlist_add_callbacks: [ref.types.uint32, [sp_playlistPtr, sp_playlist_callbacksPtr, voidPtr]],
    sp_playlist_remove_callbacks: [ref.types.uint32, [sp_playlistPtr, sp_playlist_callbacksPtr, voidPtr]],
    sp_playlist_num_tracks: [ref.types.int32, [sp_playlistPtr]],
    sp_playlist_track: [sp_trackPtr, [sp_playlistPtr, ref.types.int32]],
    sp_playlist_track_create_time: [ref.types.int32, [sp_playlistPtr, ref.types.int32]],
    sp_playlist_track_creator: [sp_userPtr, [sp_playlistPtr, ref.types.int32]],
    sp_playlist_track_seen: [ref.types.uchar, [sp_playlistPtr, ref.types.int32]],
    sp_playlist_track_set_seen: [ref.types.uint32, [sp_playlistPtr, ref.types.int32, ref.types.uchar]],
    sp_playlist_track_message: [ref.types.CString, [sp_playlistPtr, ref.types.int32]],
    sp_playlist_name: [ref.types.CString, [sp_playlistPtr]],
    sp_playlist_rename: [ref.types.uint32, [sp_playlistPtr, ref.types.CString]],
    sp_playlist_owner: [sp_userPtr, [sp_playlistPtr]],
    sp_playlist_is_collaborative: [ref.types.uchar, [sp_playlistPtr]],
    sp_playlist_set_collaborative: [ref.types.uint32, [sp_playlistPtr, ref.types.uchar]],
    sp_playlist_set_autolink_tracks: [ref.types.uint32, [sp_playlistPtr, ref.types.uchar]],
    sp_playlist_get_description: [ref.types.CString, [sp_playlistPtr]],
    sp_playlist_get_image: [ref.types.uchar, [sp_playlistPtr, bytePtr]],
    sp_playlist_has_pending_changes: [ref.types.uchar, [sp_playlistPtr]],
    sp_playlist_add_tracks: [ref.types.uint32, [sp_playlistPtr, ref.refType(sp_trackPtr), ref.types.int32, ref.types.int32, sp_sessionPtr]],
    sp_playlist_remove_tracks: [ref.types.uint32, [sp_playlistPtr, voidPtr, ref.types.int32]],
    sp_playlist_reorder_tracks: [ref.types.uint32, [sp_playlistPtr, voidPtr, ref.types.int32, ref.types.int32]],
    sp_playlist_num_subscribers: [ref.types.uint32, [sp_playlistPtr]],
    sp_playlist_subscribers: [sp_subscribersPtr, [sp_playlistPtr]],
    sp_playlist_subscribers_free: [ref.types.uint32, [sp_subscribersPtr]],
    sp_playlist_update_subscribers: [ref.types.uint32, [sp_sessionPtr, sp_playlistPtr]],
    sp_playlist_is_in_ram: [ref.types.uchar, [sp_sessionPtr, sp_playlistPtr]],
    sp_playlist_set_in_ram: [ref.types.uint32, [sp_sessionPtr, sp_playlistPtr, ref.types.uchar]],
    sp_playlist_create: [sp_playlistPtr, [sp_sessionPtr, sp_linkPtr]],
    sp_playlist_set_offline_mode: [ref.types.uint32, [sp_sessionPtr, sp_playlistPtr, ref.types.uchar]],
    sp_playlist_get_offline_status: [ref.types.uint32, [sp_sessionPtr, sp_playlistPtr]],
    sp_playlist_get_offline_download_completed: [ref.types.int32, [sp_sessionPtr, sp_playlistPtr]],
    sp_playlist_add_ref: [ref.types.uint32, [sp_playlistPtr]],
    sp_playlist_release: [ref.types.uint32, [sp_playlistPtr]],
    sp_playlistcontainer_add_callbacks: [ref.types.uint32, [sp_playlistcontainerPtr, sp_playlistcontainer_callbacksPtr, voidPtr]],
    sp_playlistcontainer_remove_callbacks: [ref.types.uint32, [sp_playlistcontainerPtr, sp_playlistcontainer_callbacksPtr, voidPtr]],
    sp_playlistcontainer_num_playlists: [ref.types.int32, [sp_playlistcontainerPtr]],
    sp_playlistcontainer_is_loaded: [ref.types.uchar, [sp_playlistcontainerPtr]],
    sp_playlistcontainer_playlist: [sp_playlistPtr, [sp_playlistcontainerPtr, ref.types.int32]],
    sp_playlistcontainer_playlist_type: [ref.types.uint32, [sp_playlistcontainerPtr, ref.types.int32]],
    sp_playlistcontainer_playlist_folder_name: [ref.types.uint32, [sp_playlistcontainerPtr, ref.types.int32, ref.types.CString, ref.types.int32]],
    sp_playlistcontainer_playlist_folder_id: [ref.types.uint64, [sp_playlistcontainerPtr, ref.types.int32]],
    sp_playlistcontainer_add_new_playlist: [sp_playlistPtr, [sp_playlistcontainerPtr, ref.types.CString]],
    sp_playlistcontainer_add_playlist: [sp_playlistPtr, [sp_playlistcontainerPtr, sp_linkPtr]],
    sp_playlistcontainer_remove_playlist: [ref.types.uint32, [sp_playlistcontainerPtr, ref.types.int32]],
    sp_playlistcontainer_move_playlist: [ref.types.uint32, [sp_playlistcontainerPtr, ref.types.int32, ref.types.int32, ref.types.uchar]],
    sp_playlistcontainer_add_folder: [ref.types.uint32, [sp_playlistcontainerPtr, ref.types.int32, ref.types.CString]],
    sp_playlistcontainer_owner: [sp_userPtr, [sp_playlistcontainerPtr]],
    sp_playlistcontainer_add_ref: [ref.types.uint32, [sp_playlistcontainerPtr]],
    sp_playlistcontainer_release: [ref.types.uint32, [sp_playlistcontainerPtr]],
    sp_playlistcontainer_get_unseen_tracks: [ref.types.int32, [sp_playlistcontainerPtr, sp_playlistPtr, voidPtr, ref.types.int32]],
    sp_playlistcontainer_clear_unseen_tracks: [ref.types.int32, [sp_playlistcontainerPtr, sp_playlistPtr]],
    sp_user_canonical_name: [ref.types.CString, [sp_userPtr]],
    sp_user_display_name: [ref.types.CString, [sp_userPtr]],
    sp_user_is_loaded: [ref.types.uchar, [sp_userPtr]],
    sp_user_add_ref: [ref.types.uint32, [sp_userPtr]],
    sp_user_release: [ref.types.uint32, [sp_userPtr]],
    sp_toplistbrowse_create: [sp_toplistbrowse, [sp_sessionPtr, ref.types.uint32, ref.types.uint32, ref.types.CString, toplistbrowse_complete_cbPtr, voidPtr]],
    sp_toplistbrowse_is_loaded: [ref.types.uchar, [sp_toplistbrowsePtr]],
    sp_toplistbrowse_error: [ref.types.uint32, [sp_toplistbrowsePtr]],
    sp_toplistbrowse_add_ref: [ref.types.uint32, [sp_toplistbrowsePtr]],
    sp_toplistbrowse_release: [ref.types.uint32, [sp_toplistbrowsePtr]],
    sp_toplistbrowse_num_artists: [ref.types.int32, [sp_toplistbrowsePtr]],
    sp_toplistbrowse_artist: [sp_artistPtr, [sp_toplistbrowsePtr, ref.types.int32]],
    sp_toplistbrowse_num_albums: [ref.types.int32, [sp_toplistbrowsePtr]],
    sp_toplistbrowse_album: [sp_albumPtr, [sp_toplistbrowsePtr, ref.types.int32]],
    sp_toplistbrowse_num_tracks: [ref.types.int32, [sp_toplistbrowsePtr]],
    sp_toplistbrowse_track: [sp_trackPtr, [sp_toplistbrowsePtr, ref.types.int32]],
    sp_toplistbrowse_backend_request_duration: [ref.types.int32, [sp_toplistbrowsePtr]],
    sp_inbox_post_tracks: [sp_inbox, [sp_sessionPtr, ref.types.CString, voidPtr, ref.types.int32, ref.types.CString, inboxpost_complete_cbPtr, voidPtr]],
    sp_inbox_error: [ref.types.uint32, [sp_inboxPtr]],
    sp_inbox_add_ref: [ref.types.uint32, [sp_inboxPtr]],
    sp_inbox_release: [ref.types.uint32, [sp_inboxPtr]],
    sp_build_id: [ref.types.CString, []],
});
